//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Utility/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""GameControls"",
            ""id"": ""e12e3566-4b92-46cc-b76c-cc8f2d9c15e3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8b207a97-512b-4a51-b022-6c59af2d53c4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GrabDrop"",
                    ""type"": ""Button"",
                    ""id"": ""b91fbaeb-0c26-4c20-990a-1a1a772642fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectUp"",
                    ""type"": ""Button"",
                    ""id"": ""828cdbe2-0fd3-4044-bc35-e497953bbda5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectDown"",
                    ""type"": ""Button"",
                    ""id"": ""3476aded-ad5e-478f-bfc6-2068605d8764"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""fc40e854-5b3e-4f5e-af6b-d8acd4f68a5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""1aa83e05-e225-4b75-8d01-cba39445e5b5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b4fe4110-e2d6-4e45-b4e9-d8c2636b000c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f226e607-11d6-4679-bb32-925684c48115"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9dea74ac-85c4-4ca3-8cbd-4113d103042a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1e4447d3-ea5f-4151-99ee-fc9d3b7873f9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""09786d46-55b3-4233-b4ac-e0233bdac623"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""GrabDrop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56322c04-2153-4ca0-b85b-b20c092fdfbb"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""SelectUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9f4737f-fb7d-4fd9-b38a-4ac947acdc1a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""SelectDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67a52034-dec9-43b3-8780-e986891ee926"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": []
        }
    ]
}");
        // GameControls
        m_GameControls = asset.FindActionMap("GameControls", throwIfNotFound: true);
        m_GameControls_Move = m_GameControls.FindAction("Move", throwIfNotFound: true);
        m_GameControls_GrabDrop = m_GameControls.FindAction("GrabDrop", throwIfNotFound: true);
        m_GameControls_SelectUp = m_GameControls.FindAction("SelectUp", throwIfNotFound: true);
        m_GameControls_SelectDown = m_GameControls.FindAction("SelectDown", throwIfNotFound: true);
        m_GameControls_Interact = m_GameControls.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameControls
    private readonly InputActionMap m_GameControls;
    private IGameControlsActions m_GameControlsActionsCallbackInterface;
    private readonly InputAction m_GameControls_Move;
    private readonly InputAction m_GameControls_GrabDrop;
    private readonly InputAction m_GameControls_SelectUp;
    private readonly InputAction m_GameControls_SelectDown;
    private readonly InputAction m_GameControls_Interact;
    public struct GameControlsActions
    {
        private @PlayerControls m_Wrapper;
        public GameControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GameControls_Move;
        public InputAction @GrabDrop => m_Wrapper.m_GameControls_GrabDrop;
        public InputAction @SelectUp => m_Wrapper.m_GameControls_SelectUp;
        public InputAction @SelectDown => m_Wrapper.m_GameControls_SelectDown;
        public InputAction @Interact => m_Wrapper.m_GameControls_Interact;
        public InputActionMap Get() { return m_Wrapper.m_GameControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameControlsActions set) { return set.Get(); }
        public void SetCallbacks(IGameControlsActions instance)
        {
            if (m_Wrapper.m_GameControlsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnMove;
                @GrabDrop.started -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnGrabDrop;
                @GrabDrop.performed -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnGrabDrop;
                @GrabDrop.canceled -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnGrabDrop;
                @SelectUp.started -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnSelectUp;
                @SelectUp.performed -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnSelectUp;
                @SelectUp.canceled -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnSelectUp;
                @SelectDown.started -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnSelectDown;
                @SelectDown.performed -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnSelectDown;
                @SelectDown.canceled -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnSelectDown;
                @Interact.started -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_GameControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @GrabDrop.started += instance.OnGrabDrop;
                @GrabDrop.performed += instance.OnGrabDrop;
                @GrabDrop.canceled += instance.OnGrabDrop;
                @SelectUp.started += instance.OnSelectUp;
                @SelectUp.performed += instance.OnSelectUp;
                @SelectUp.canceled += instance.OnSelectUp;
                @SelectDown.started += instance.OnSelectDown;
                @SelectDown.performed += instance.OnSelectDown;
                @SelectDown.canceled += instance.OnSelectDown;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public GameControlsActions @GameControls => new GameControlsActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    public interface IGameControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnGrabDrop(InputAction.CallbackContext context);
        void OnSelectUp(InputAction.CallbackContext context);
        void OnSelectDown(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
